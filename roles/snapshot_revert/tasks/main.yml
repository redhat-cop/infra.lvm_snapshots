- name: Calculate the list of snapshots
  block:
  - name: Get list of volumes
    ansible.builtin.command: "lvs --select 'lv_name =~ {{ revert_snapshot_set_name }}$ && origin != \"\"' --reportformat json "
    register: revert_snapshot_lvs_response
    changed_when: false
  - name: Get LV dict List
    ansible.builtin.set_fact:
      revert_snapshot_snapshots: "{{ (revert_snapshot_lvs_response.stdout | from_json).report[0].lv }}"

- name: Verify that all snapshots are active
  ansible.builtin.include_tasks: verify_snapshot_active.yml
  loop: "{{ revert_snapshot_snapshots }}"

- name: Required packages are present
  ansible.builtin.package:
    name:
    - gzip
    - tar
    state: present

- name: Check if Boot backup exists
  ansible.builtin.stat:
    path: "/root/boot-backup-{{ revert_snapshot_set_name }}.tgz"
  register: revert_snapshot_boot_archive_stat

- name: Restore boot backup
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ revert_snapshot_boot_archive_stat.stat.path }}"
    dest: /boot
  when: revert_snapshot_boot_archive_stat.stat.exists

- name: Revert to snapshots
  ansible.builtin.command: "lvconvert --merge /dev/{{ item.vg_name }}/{{ item.lv_name }}"
  loop: "{{ revert_snapshot_snapshots }}"
  changed_when: false

- name: Reboot
  ansible.builtin.reboot:

- name: Check if /boot is on LVM
  ansible.builtin.command: "grub2-probe --target=abstraction /boot"
  changed_when: false
  failed_when: false
  register: revert_snapshot_boot_abstraction

- name: Reinstall Grub to boot device
  when: revert_snapshot_boot_abstraction.stdout == 'lvm'
  block:
  - name: Get boot device
    ansible.builtin.shell: "lsblk -spnlo name $(grub2-probe --target=device /boot)"
    changed_when: false
    register: revert_snapshot_boot_dev_deps

  - name: Run grub2-install
    ansible.builtin.command: "grub2-install {{ revert_snapshot_boot_dev_deps.stdout_lines | last }}"
    changed_when: true

- name: Remove boot backup
  ansible.builtin.file:
    path: "{{ revert_snapshot_boot_archive_stat.stat.path }}"
    state: absent
  when: revert_snapshot_boot_archive_stat.stat.exists

- name: Wait for the snapshot to drain
  ansible.builtin.command: "lvs --select 'vg_name = {{ item.vg_name }} && lv_name = {{ item.origin }}' --reportformat json"
  register: revert_snapshot_lv_drain_check
  until: (revert_snapshot_lv_drain_check.stdout | from_json).report[0].lv[0].data_percent == ""
  retries: 20
  delay: 30
  loop: "{{ revert_snapshot_snapshots }}"
  changed_when: false
